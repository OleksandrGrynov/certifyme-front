import { useState, useEffect } from "react";
import { Server, Bell, HardDriveDownload, Brain } from "lucide-react";
import { useTranslation } from "react-i18next";

export default function AdminSettingsPage() {
    const { t, i18n } = useTranslation();
    const [system, setSystem] = useState(null);
    const [insights, setInsights] = useState([]);
    const [notifications, setNotifications] = useState({
        newUser: true,
        newCert: true,
        newReview: false,
        errors: true,
    });

    // üß© –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–º–æ–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞)
    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) return console.warn("‚ö†Ô∏è Token missing in localStorage");

        const lang = i18n.language; // <‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É
        fetch(`http://localhost:5000/api/settings/system?lang=${lang}`, {
            headers: { Authorization: `Bearer ${token}` },
        })
            .then((r) => {
                if (!r.ok) throw new Error("Unauthorized");
                return r.json();
            })
            .then((data) => setSystem(data.info))
            .catch((err) => {
                console.error("‚ùå Error loading system info:", err);
                setSystem(null);
            });
    }, [i18n.language]); // <‚Äî –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏

    // ü§ñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è AI-—ñ–Ω—Å–∞–π—Ç—ñ–≤ (–º–æ–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞)
    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) return console.warn("‚ö†Ô∏è Token missing in localStorage");

        const lang = i18n.language;
        fetch(`http://localhost:5000/api/settings/insights?lang=${lang}`, {
            headers: { Authorization: `Bearer ${token}` },
        })
            .then((r) => {
                if (!r.ok) throw new Error("Unauthorized");
                return r.json();
            })
            .then((data) => setInsights(data.insights || []))
            .catch((err) => {
                console.error("‚ùå Error loading insights:", err);
                setInsights([]);
            });
    }, [i18n.language]);

    return (
        <div className="space-y-8">
            <h2 className="text-xl font-semibold text-green-400 flex items-center gap-2">
                ‚öôÔ∏è {t("systemManagement")}
            </h2>

            {/* 1Ô∏è‚É£ –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <Server size={20} /> {t("systemStatus")}
                </h3>

                {system ? (
                    <div className="grid sm:grid-cols-2 gap-3 text-gray-300">
                        <p>
                            üåê {t("apiVersion")}:{" "}
                            <span className="text-white">{system.apiVersion || "‚Äî"}</span>
                        </p>
                        <p>
                            üóÑÔ∏è {t("database")}:{" "}
                            <span className="text-white">{system.dbStatus || "‚Äî"}</span>
                        </p>
                        <p>
                            üöÄ {t("uptime")}:{" "}
                            <span className="text-white">{system.uptime || "‚Äî"}</span>
                        </p>
                        <p>
                            üìä {t("activeQueries")}:{" "}
                            <span className="text-white">{system.activeQueries || 0}</span>
                        </p>
                    </div>
                ) : (
                    <p className="text-gray-500">‚è≥ {t("systemLoading")}</p>
                )}
            </section>

            {/* 2Ô∏è‚É£ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <HardDriveDownload size={20} /> {t("backups")}
                </h3>
                <button className="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded-lg">
                    üì¶ {t("createBackup")}
                </button>
                <ul className="mt-4 text-gray-400 space-y-2">
                    <li>
                        27.10.2025 ‚Äî <span className="text-green-400">{t("success")}</span>
                    </li>
                    <li>
                        25.10.2025 ‚Äî <span className="text-green-400">{t("success")}</span>
                    </li>
                    <li>
                        21.10.2025 ‚Äî <span className="text-yellow-400">{t("partial")}</span>
                    </li>
                </ul>
            </section>

            {/* 3Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <Bell size={20} /> {t("notifications")}
                </h3>
                <div className="flex flex-col gap-2 text-gray-300">
                    {Object.entries(notifications).map(([key, value]) => (
                        <label key={key} className="flex items-center gap-3">
                            <input
                                type="checkbox"
                                checked={value}
                                onChange={() =>
                                    setNotifications((p) => ({ ...p, [key]: !p[key] }))
                                }
                                className="accent-green-500"
                            />
                            {t(`notif_${key}`)}
                        </label>
                    ))}
                </div>
            </section>

            {/* 4Ô∏è‚É£ AI —ñ–Ω—Å–∞–π—Ç–∏ */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <Brain size={20} /> {t("insights")}
                </h3>
                {insights.length ? (
                    <ul className="list-disc list-inside text-gray-300 space-y-1">
                        {insights.map((i, idx) => (
                            <li key={idx}>{i}</li>
                        ))}
                    </ul>
                ) : (
                    <p className="text-gray-500">ü§ñ {t("analyticsGenerating")}</p>
                )}
            </section>
        </div>
    );
}
