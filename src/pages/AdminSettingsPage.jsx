import { useState, useEffect } from "react";
import { Server, Bell, HardDriveDownload, Brain } from "lucide-react";

export default function AdminSettingsPage() {
    const [system, setSystem] = useState(null);
    const [insights, setInsights] = useState([]);
    const [notifications, setNotifications] = useState({
        newUser: true,
        newCert: true,
        newReview: false,
        errors: true,
    });

    // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) {
            console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É localStorage");
            return;
        }

        fetch("http://localhost:5000/api/settings/system", {
            headers: { Authorization: `Bearer ${token}` },
        })
            .then((r) => {
                if (!r.ok) throw new Error("Unauthorized");
                return r.json();
            })
            .then((data) => setSystem(data.info))
            .catch((err) => {
                console.error("‚ùå Error loading system info:", err);
                setSystem(null);
            });
    }, []);

    // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è AI-—ñ–Ω—Å–∞–π—Ç—ñ–≤
    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) {
            console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É localStorage");
            return;
        }

        fetch("http://localhost:5000/api/settings/insights", {
            headers: { Authorization: `Bearer ${token}` },
        })
            .then((r) => {
                if (!r.ok) throw new Error("Unauthorized");
                return r.json();
            })
            .then((data) => setInsights(data.insights || []))
            .catch((err) => {
                console.error("‚ùå Error loading insights:", err);
                setInsights([]);
            });
    }, []);

    return (
        <div className="space-y-8">
            <h2 className="text-xl font-semibold text-green-400 flex items-center gap-2">
                ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
            </h2>

            {/* 1Ô∏è‚É£ –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <Server size={20} /> –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
                </h3>

                {system ? (
                    <div className="grid sm:grid-cols-2 gap-3 text-gray-300">
                        <p>
                            üåê API –≤–µ—Ä—Å—ñ—è:{" "}
                            <span className="text-white">
                                {system.apiVersion || "‚Äî"}
                            </span>
                        </p>
                        <p>
                            üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:{" "}
                            <span className="text-white">
                                {system.dbStatus || "‚Äî"}
                            </span>
                        </p>
                        <p>
                            üöÄ Uptime:{" "}
                            <span className="text-white">
                                {system.uptime || "‚Äî"}
                            </span>
                        </p>
                        <p>
                            üìä –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏:{" "}
                            <span className="text-white">
                                {system.activeQueries || 0}
                            </span>
                        </p>
                    </div>
                ) : (
                    <p className="text-gray-500">‚è≥ –î–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...</p>
                )}
            </section>

            {/* 2Ô∏è‚É£ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <HardDriveDownload size={20} /> –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
                </h3>
                <button className="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded-lg">
                    üì¶ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
                </button>
                <ul className="mt-4 text-gray-400 space-y-2">
                    <li>
                        27.10.2025 ‚Äî <span className="text-green-400">—É—Å–ø—ñ—à–Ω–æ</span>
                    </li>
                    <li>
                        25.10.2025 ‚Äî <span className="text-green-400">—É—Å–ø—ñ—à–Ω–æ</span>
                    </li>
                    <li>
                        21.10.2025 ‚Äî <span className="text-yellow-400">—á–∞—Å—Ç–∫–æ–≤–æ</span>
                    </li>
                </ul>
            </section>

            {/* 3Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <Bell size={20} /> –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                </h3>
                <div className="flex flex-col gap-2 text-gray-300">
                    {Object.entries(notifications).map(([key, value]) => (
                        <label key={key} className="flex items-center gap-3">
                            <input
                                type="checkbox"
                                checked={value}
                                onChange={() =>
                                    setNotifications((p) => ({ ...p, [key]: !p[key] }))
                                }
                                className="accent-green-500"
                            />
                            {translateKey(key)}
                        </label>
                    ))}
                </div>
            </section>

            {/* 4Ô∏è‚É£ AI —ñ–Ω—Å–∞–π—Ç–∏ */}
            <section className="bg-gray-900/70 p-6 rounded-xl border border-gray-800">
                <h3 className="text-green-400 font-medium flex items-center gap-2 mb-3">
                    <Brain size={20} /> –Ü–Ω—Å–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–∏
                </h3>
                {insights.length ? (
                    <ul className="list-disc list-inside text-gray-300 space-y-1">
                        {insights.map((i, idx) => (
                            <li key={idx}>{i}</li>
                        ))}
                    </ul>
                ) : (
                    <p className="text-gray-500">ü§ñ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ñ–æ—Ä–º—É—î—Ç—å—Å—è...</p>
                )}
            </section>
        </div>
    );
}

// üîπ –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞–∑–≤ —á–µ–∫–±–æ–∫—Å—ñ–≤
function translateKey(key) {
    const map = {
        newUser: "–ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
        newCert: "–û—Ç—Ä–∏–º–∞–Ω—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏",
        newReview: "–ù–æ–≤—ñ –≤—ñ–¥–≥—É–∫–∏",
        errors: "–ü–æ–º–∏–ª–∫–∏ —Å–∏—Å—Ç–µ–º–∏",
    };
    return map[key] || key;
}
