import { useEffect, useRef, useState } from "react";
import { Navigate, useNavigate } from "react-router-dom";
import toast, { Toaster } from "react-hot-toast";
import AuthModal from "./AuthModal";

export default function ProtectedRoute({ children, requiredRole = "user" }) {
    const [showAuth, setShowAuth] = useState(false);
    const [checked, setChecked] = useState(false);
    const [isValidUser, setIsValidUser] = useState(false);
    const toastShownRef = useRef(false);
    const navigate = useNavigate();

    useEffect(() => {
        const token = localStorage.getItem("token");

        if (!token || token.split(".").length !== 3) {
            if (!toastShownRef.current) {
                toast.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∞–±–æ —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É üíö", {
                    style: {
                        background: "#111",
                        color: "#fff",
                        border: "1px solid #22c55e",
                    },
                });
                toastShownRef.current = true;
            }
            setShowAuth(true);
            setChecked(true);
            return;
        }

        try {
            const base64 = token.split(".")[1].replace(/-/g, "+").replace(/_/g, "/");
            const payload = JSON.parse(atob(base64));

            if (requiredRole === "admin" && payload.role !== "admin") {
                if (!toastShownRef.current) {
                    toast.error("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ üö´", {
                        style: {
                            background: "#111",
                            color: "#fff",
                            border: "1px solid #ef4444",
                        },
                    });
                    toastShownRef.current = true;
                }
                setChecked(true);
                setIsValidUser(false);
                return;
            }

            setIsValidUser(true);
        } catch {
            if (!toastShownRef.current) {
                toast.error("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É üíö", {
                    style: {
                        background: "#111",
                        color: "#fff",
                        border: "1px solid #22c55e",
                    },
                });
                toastShownRef.current = true;
            }
            setShowAuth(true);
        } finally {
            setChecked(true);
        }
    }, [requiredRole]);

    const handleModalClose = () => {
        setShowAuth(false);
        navigate("/"); // üü¢ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ –º–æ–¥–∞–ª–∫—É ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
    };

    if (!checked)
        return (
            <div className="flex justify-center items-center h-screen text-gray-400">
                –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
            </div>
        );

    if (!isValidUser) {
        return (
            <>
                <Toaster position="top-center" />
                {showAuth && <AuthModal isOpen={showAuth} onClose={handleModalClose} />}
            </>
        );
    }

    return children;
}
